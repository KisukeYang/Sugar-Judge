/* * MIT License * * Copyright (c) 2018 Kisuke.Yang * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package com.sugar.judgeimport com.sugar.judge.rest.*import com.sugar.judge.utils.*import io.vertx.config.ConfigRetrieverimport io.vertx.config.ConfigRetrieverOptionsimport io.vertx.core.AbstractVerticleimport io.vertx.core.eventbus.Messageimport io.vertx.core.http.HttpMethodimport io.vertx.core.http.HttpServerimport io.vertx.core.json.JsonArrayimport io.vertx.core.json.JsonObjectimport io.vertx.ext.auth.jwt.JWTAuthimport io.vertx.ext.auth.jwt.JWTAuthOptionsimport io.vertx.ext.web.Routerimport io.vertx.ext.web.RoutingContextimport io.vertx.ext.web.handler.BodyHandlerimport io.vertx.ext.web.handler.CorsHandlerimport io.vertx.ext.web.handler.JWTAuthHandlerimport io.vertx.kotlin.config.ConfigStoreOptionsimport io.vertx.kotlin.core.json.jsonimport io.vertx.kotlin.core.json.objimport io.vertx.kotlin.coroutines.awaitResultimport io.vertx.kotlin.coroutines.dispatcherimport kotlinx.coroutines.experimental.launchimport org.slf4j.LoggerFactoryimport java.util.*class MainVerticle : AbstractVerticle() {    private val logger = LoggerFactory.getLogger(MainVerticle::class.java)    private lateinit var server: HttpServer    private lateinit var mainRouter: Router    private lateinit var config: JsonObject    private lateinit var baseUrl: String    override fun start() {        super.start()        // 加载配置文件        val configStore = ConfigStoreOptions(                type = "file",                config = json {                    obj("path" to "config.json")                }        )        val urlStore = ConfigStoreOptions(                type = "file",                config = json {                    obj("path" to "url-config.json")                }        )        val retriever = ConfigRetriever.create(vertx, ConfigRetrieverOptions().addStore(configStore).addStore(urlStore))        retriever.getConfig {            if (it.succeeded()) {                this.config = it.result()                // 初始化 vertx config                context.config().mergeIn(this.config.getJsonObject("database"))                this.baseUrl = config.getString("baseUrl")                // 部署 Db Verticle                if (config.getJsonArray("dbVerticle").isEmpty) {                    logger.error("加载数据库配置失败!")                    vertx.close()                }                deployVerticle(config.getJsonArray("verticle"))                deployRestVerticle()                // 配置 url 监听                //listenRequest(config.getJsonArray("urls"))                // 启动服务器                startServer(config.getJsonObject("http_server"))            } else {                vertx.close()            }        }    }    /*private fun listenRequest(listenUrls: JsonArray) {        val jwtProvider = JWTAuth.create(vertx, JWTAuthOptions(config.getJsonObject("jwt")))        val jwtHandler = JWTAuthHandler.create(jwtProvider)        this.server = vertx.createHttpServer()        this.mainRouter = Router.router(vertx)        // Enable CORS.        enableCorsSupport(mainRouter)        if (!listenUrls.isEmpty) {            // 遍历 url            listenUrls.forEach {                if (it is JsonObject) {                    // 判断 url 是否需要鉴权                    val type = it.getString("type")                    val subType = it.getString("subtype")                    if (it.getBoolean("auth")) {                        mainRouter.post("/$type/$subType").handler(jwtHandler).handler {                            dispatchRequest(it, type, subType)                        }                    } else {                        mainRouter.post("/$type/$subType").handler {                            dispatchRequest(it, type, subType)                        }                    }                }            }        }    }*/    /**     * 分发请求     * */    /*private fun dispatchRequest(rc: RoutingContext, type: String, subType: String){        var param = rc.bodyAsJson        launch(context.dispatcher()){            val replyResult = awaitResult<Message<JsonObject>> {               vertx.eventBus().send("", param, it)            }            val resultCode = replyResult.body().getInteger("code")            when(resultCode){                200 -> {}                404 -> {}                else -> error(rc, "")            }        }    }*/    private fun enableCorsSupport(router: Router) {        val allowHeaders = HashSet<String>()        allowHeaders.add("x-requested-with")        allowHeaders.add("Access-Control-Allow-Origin")        allowHeaders.add("origin")        allowHeaders.add("Content-Type")        allowHeaders.add("accept")        // CORS support        router.route().handler(                CorsHandler.create("*")                        .allowedHeaders(allowHeaders)                        .allowedMethod(HttpMethod.GET)                        .allowedMethod(HttpMethod.POST)                        .allowedMethod(HttpMethod.DELETE)                        .allowedMethod(HttpMethod.PATCH)                        .allowedMethod(HttpMethod.PUT)        )        // 请求体解析        mainRouter.route().handler(BodyHandler.create())    }    /**     *  启动 Http Server     * */    private fun startServer(config: JsonObject) {        server.requestHandler(mainRouter::accept).listen(config.getInteger("port"), config.getString("address")) { res ->            if (res.succeeded()) {                //flogger.info("HTTP Server success started, listen port:{}", port)                logger.info("服务器启动成功")            } else {                logger.error("HTTP Server start failed, listen port:${config.getInteger("port")}，cause：${res.cause().localizedMessage}")            }        }    }    /**     * 部署  DbVerticle     * */    private fun deployVerticle(dbVerticle: JsonArray) {        dbVerticle.list.forEach { verticleName ->            if (verticleName is String) {                vertx.deployVerticle(verticleName) {                    if (it.succeeded()) {                        logger.info("$verticleName deployed ok, deploymentID = ${it.result()}")                    } else {                        it.cause().printStackTrace()                    }                }            }        }    }    private fun deployRestVerticle() {        val jwtProvider = JWTAuth.create(vertx, JWTAuthOptions(config.getJsonObject("jwt")))        val jwtHandler = JWTAuthHandler.create(jwtProvider)        vertx.deployVerticle(AccountRestVerticle(mainRouter, jwtProvider, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.AccountRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.AccountRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }        vertx.deployVerticle(ContestRestVerticle(mainRouter, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.ContestRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.ContestRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }        vertx.deployVerticle(SubmissionRestVerticle(mainRouter, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.SubmissionRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.SubmissionRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }        vertx.deployVerticle(ProblemRestVerticle(mainRouter, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.ProblemRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.ProblemRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }        vertx.deployVerticle(DiscussRestVerticle(mainRouter, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.DiscussRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.DiscussRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }        vertx.deployVerticle(MessageRestVerticle(mainRouter, jwtHandler)) {            if (it.succeeded()) {                logger.info("com.sugar.judge.rest.MessageRestVerticle deployed ok, deploymentID = ${it.result()}")            } else {                it.cause().printStackTrace()                logger.error("com.sugar.judge.rest.MessageRestVerticle 部署失败，原因：${it.cause().localizedMessage}")            }        }    }}